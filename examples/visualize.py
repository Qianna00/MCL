import torch
from PIL import Image
from sklearn.manifold import TSNE
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from collections import OrderedDict

from mcl import datasets
from mcl import models
from mcl.utils.data import transforms as T
from mcl.utils import to_torch
from mcl.utils.serialization import load_checkpoint


def num2color(values, cmap):
    """将数值映射为颜色"""
    norm = mpl.colors.Normalize(vmin=np.min(values), vmax=np.max(values))
    cmap = mpl.cm.get_cmap(cmap)
    return [cmap(norm(val)) for val in values]


def plot_embedding_2D(data, colors):
    x_min, x_max = np.min(data, 0), np.max(data, 0)
    data = (data - x_min) / (x_max - x_min)
    # colors = np.arange(0, 1248)
    fig = plt.figure()
    plt.scatter(data[:, 0], data[:, 1], marker='o', c='w', edgecolors=colors)
    return fig

def get_state_dict(old_dict):
    new_state_dict = OrderedDict()
    for key, value in old_dict.items():
        new_key = key[7:]
        new_state_dict[new_key] = value
    return new_state_dict


normalizer = T.Normalize(mean=[0.485, 0.456, 0.406],
                             std=[0.229, 0.224, 0.225])

test_transformer = T.Compose([T.Resize((180, 256), interpolation=3), T.ToTensor(), normalizer])

dataset = datasets.create('market1501', root='/root/data/zq/data/vessel_reid')
train_data = dataset.gallery

train_pids = [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 24, 25, 27, 28, 32, 35, 37, 39, 40, 42, 43, 46, 47, 48, 50,
        51, 53, 56, 59, 60, 61, 62, 63, 64, 65, 69, 71, 74, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 90, 92, 97, 98, 99,
        100, 106, 107, 109, 112, 113, 114, 117, 119, 122, 126, 127, 128, 132, 134, 135, 140, 141, 142, 143, 145, 146,
        147, 150, 153, 154, 155, 156, 157, 158, 160, 161, 162, 166, 168, 179, 182, 184, 185, 187, 188, 190, 191, 192,
        194, 196, 201, 204, 206, 208, 210, 211, 212, 218, 220, 221, 223, 227, 229, 230, 231, 232, 237, 242, 246, 251,
        253, 257, 258, 260, 263, 265, 266, 267, 269, 270, 274, 278, 279, 280, 281, 284, 285, 286, 288, 291, 294, 298,
        299, 302, 303, 308, 309, 310, 311, 312, 314, 318, 320, 322, 324, 326, 327, 329, 330, 333, 335, 337, 339, 340,
        341, 342, 343, 344, 345, 346, 348, 349, 353, 354, 359, 361, 362, 363, 364, 366, 368, 372, 376, 378, 380, 381,
        382, 385, 388, 389, 390, 391, 393, 396, 400, 402, 404, 405, 406, 408, 409, 414, 418, 419, 420, 424, 428, 430,
        431, 435, 436, 438, 439, 440, 443, 444, 448, 450, 453, 454, 455, 460, 461, 462, 466, 467, 469, 470, 475, 477,
        481, 483, 486, 487, 490, 491, 494, 495, 496, 498, 499, 502, 504, 507, 509, 510, 512, 513, 518, 519, 520, 521,
        524, 527, 529, 530, 532, 533, 536, 537, 539, 541, 550, 551, 552, 553, 554, 559, 560, 564, 566, 567, 568, 569,
        570, 573, 574, 575, 578, 582, 584, 586, 588, 589, 590, 594, 595, 596, 597, 598, 600, 601, 602, 604, 608, 609,
        610, 612, 613, 614, 617, 619, 624, 626, 627, 630, 632, 633, 640, 642, 643, 645, 646, 647, 649, 650, 652, 653,
        654, 657, 658, 660, 661, 663, 664, 666, 667, 672, 674, 676, 677, 678, 679, 682, 683, 685, 688, 691, 692, 694,
        695, 703, 705, 710, 711, 712, 713, 716, 718, 719, 721, 722, 723, 727, 729, 731, 732, 733, 734, 736, 737, 740,
        742, 743, 745, 746, 747, 748, 749, 751, 756, 757, 758, 759, 761, 763, 765, 766, 767, 769, 770, 771, 774, 775,
        778, 784, 786, 787, 788, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 816, 817,
        818, 819, 820, 821, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 840, 843, 844, 845, 849, 851, 852,
        853, 857, 858, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 876, 879, 881, 882, 883, 884, 885, 891,
        894, 898, 899, 901, 904, 905, 907, 908, 909, 910, 912, 913, 917, 918, 920, 924, 925, 928, 929, 936, 939, 940,
        944, 945, 946, 951, 952, 954, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 971, 972, 974, 976, 979,
        985, 988, 991, 997, 999, 1001, 1003, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1022, 1024,
        1025, 1027, 1028, 1031, 1032, 1036, 1041, 1044, 1045, 1049, 1050, 1060, 1062, 1064, 1065, 1066, 1067, 1068,
        1072, 1074, 1075, 1077, 1079, 1080, 1082, 1083, 1085, 1086, 1089, 1093, 1096, 1097, 1099, 1100, 1101, 1103,
        1104, 1106, 1107, 1108, 1109, 1112, 1115, 1117, 1118, 1119, 1120, 1121, 1125, 1126, 1129, 1132, 1133, 1134,
        1138, 1139, 1142, 1144, 1145, 1146, 1152, 1153, 1156, 1157, 1160, 1161, 1167, 1169, 1170, 1171, 1172, 1173,
        1174, 1175, 1176, 1178, 1179, 1184, 1185, 1187, 1188, 1195, 1199, 1200, 1201, 1204, 1206, 1208, 1213, 1214,
        1216, 1217, 1220, 1223, 1224, 1226, 1229, 1230, 1231, 1232, 1238, 1240, 1241, 1242, 1243, 1244, 1246, 1247]
test_pids = [1, 3, 5, 16, 18, 19, 20, 21, 23, 26, 29, 30, 31, 33, 34, 36, 38, 41, 44, 45, 49, 52, 54, 55, 57, 58, 66,
             67, 68, 70, 72, 73, 75, 77, 82, 87, 89, 91, 93, 94, 95, 96, 101, 102, 103, 104, 105, 108, 110, 111, 115,
             116, 118, 120, 121, 123, 124, 125, 129, 130, 131, 133, 136, 137, 138, 139, 144, 148, 149, 151, 152, 159,
             163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 186, 189, 193, 195,
             197, 198, 199, 200, 202, 203, 205, 207, 209, 213, 214, 215, 216, 217, 219, 222, 224, 225, 226, 228, 233,
             234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 259, 261, 262,
             264, 268, 271, 272, 273, 275, 276, 277, 282, 283, 287, 289, 290, 292, 293, 295, 296, 297, 300, 301, 304,
             305, 306, 307, 313, 315, 316, 317, 319, 321, 323, 325, 328, 331, 332, 334, 336, 338, 347, 350, 351, 352,
             355, 356, 357, 358, 360, 365, 367, 369, 370, 371, 373, 374, 375, 377, 379, 383, 384, 386, 387, 392, 394,
             395, 397, 398, 399, 401, 403, 407, 410, 411, 412, 413, 415, 416, 417, 421, 422, 423, 425, 426, 427, 429,
             432, 433, 434, 437, 441, 442, 445, 446, 447, 449, 451, 452, 456, 457, 458, 459, 463, 464, 465, 468, 471,
             472, 473, 474, 476, 478, 479, 480, 482, 484, 485, 488, 489, 492, 493, 497, 500, 501, 503, 505, 506, 508,
             511, 514, 515, 516, 517, 522, 523, 525, 526, 528, 531, 534, 535, 538, 540, 542, 543, 544, 545, 546, 547,
             548, 549, 555, 556, 557, 558, 561, 562, 563, 565, 571, 572, 576, 577, 579, 580, 581, 583, 585, 587, 591,
             592, 593, 599, 603, 605, 606, 607, 611, 615, 616, 618, 620, 621, 622, 623, 625, 628, 629, 631, 634, 635,
             636, 637, 638, 639, 641, 644, 648, 651, 655, 656, 659, 662, 665, 668, 669, 670, 671, 673, 675, 680, 681,
             684, 686, 687, 689, 690, 693, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 714, 715, 717,
             720, 724, 725, 726, 728, 730, 735, 738, 739, 741, 744, 750, 752, 753, 754, 755, 760, 762, 764, 768, 772,
             773, 776, 777, 779, 780, 781, 782, 783, 785, 789, 792, 795, 796, 805, 806, 809, 810, 811, 813, 814, 815,
             822, 823, 827, 832, 837, 838, 839, 841, 842, 846, 847, 848, 850, 854, 855, 856, 859, 860, 861, 865, 874,
             875, 877, 878, 880, 886, 887, 888, 889, 890, 892, 893, 895, 896, 897, 900, 902, 903, 906, 911, 914, 915,
             916, 919, 921, 922, 923, 926, 927, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 943, 947, 948, 949,
             950, 953, 955, 960, 961, 969, 970, 973, 975, 977, 978, 980, 981, 982, 983, 984, 986, 987, 989, 990, 992,
             993, 994, 995, 996, 998, 1000, 1002, 1004, 1005, 1006, 1009, 1018, 1019, 1020, 1021, 1023, 1026, 1029,
             1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1048, 1051, 1052, 1053, 1054,
             1055, 1056, 1057, 1058, 1059, 1061, 1063, 1069, 1070, 1071, 1073, 1076, 1078, 1081, 1084, 1087, 1088,
             1090, 1091, 1092, 1094, 1095, 1098, 1102, 1105, 1110, 1111, 1113, 1114, 1116, 1122, 1123, 1124, 1127,
             1128, 1130, 1131, 1135, 1136, 1137, 1140, 1141, 1143, 1147, 1148, 1149, 1150, 1151, 1154, 1155, 1158,
             1159, 1162, 1163, 1164, 1165, 1166, 1168, 1177, 1180, 1181, 1182, 1183, 1186, 1189, 1190, 1191, 1192,
             1193, 1194, 1196, 1197, 1198, 1202, 1203, 1205, 1207, 1209, 1210, 1211, 1212, 1215, 1218, 1219, 1221,
             1222, 1225, 1227, 1228, 1233, 1234, 1235, 1236, 1237, 1239, 1245, 1248]

pids = np.array(test_pids)
pid_select = list(np.random.choice(pids, 10, replace=False))

# pid_select = [18, 19, 29, 34, 57, 72, 75, 94, 95, 103]
colors_list = ['gray', 'brown', 'orange', 'olive', 'green', 'cyan', 'blue', 'purple', 'pink', 'red']
colors_dict = dict(zip(pid_select, colors_list))
colors = []

model_mcl = models.create('resnet50',  norm=True, pooling_type='gem')
model_mcl.cuda()
model_mcl.eval()
checkpoint_mcl = load_checkpoint('/root/vsislab-2/zq/ship_reid/cluster_contrast/visualize/model_best_mcl.pth.tar')
state_dict_mcl = checkpoint_mcl['state_dict']
new_state_dict_mcl = get_state_dict(state_dict_mcl)
model_mcl.load_state_dict(new_state_dict_mcl)

model_scl = models.create('resnet50',  norm=True, pooling_type='gem')
model_scl.cuda()
model_scl.eval()
checkpoint_scl = load_checkpoint('/root/vsislab-2/zq/ship_reid/cluster_contrast/visualize/model_best_scl.pth.tar')
state_dict_scl = checkpoint_scl['state_dict']
new_state_dict_scl = get_state_dict(state_dict_scl)
model_scl.load_state_dict(new_state_dict_scl)

data_mcl = np.zeros((len(train_data), 2048))
data_scl = np.zeros((len(train_data), 2048))
# label = np.zeros((len(train_data),))

num_feat = 0
with torch.no_grad():
    for i, (img_path, pid, cam_id) in enumerate(train_data):
        if pid not in pid_select:
            continue
        colors.append(colors_dict[pid])
        img = Image.open(img_path).convert('RGB')
        img = test_transformer(img)
        img = to_torch(img).cuda().unsqueeze(0)
        feature_mcl = model_mcl(img)
        data_mcl[num_feat] = feature_mcl.cpu().numpy()
        feature_scl = model_scl(img)
        data_scl[num_feat] = feature_scl.cpu().numpy()
        num_feat += 1
        print('Extracting features: {} / {}'.format(i, len(train_data)))
data_mcl = data_mcl[:num_feat]
data_scl = data_scl[:num_feat]
tsne = TSNE(init='pca', metric='cosine')
result_2D_mcl = tsne.fit_transform(data_mcl)
result_2D_scl = tsne.fit_transform(data_scl)
# label = label[:num_feat]


"""x_min, x_max = np.min(result_2D, 0), np.max(result_2D, 0)
result_2D = (result_2D - x_min) / (x_max - x_min)
print(result_2D.shape[0])
data_ = result_2D[:10, :]
fig = plt.figure()
plt.scatter(data_[1, 0], data_[1, 1], marker='o', c=10, cmap='Spectral')
plt.scatter(data_[8, 0], data_[8, 1], marker='o', c=80, cmap='Spectral')

print(data_)"""

fig1 = plot_embedding_2D(result_2D_mcl, colors)
plt.show()
plt.savefig('/root/vsislab-2/zq/ship_reid/cluster_contrast/visualize/fig_mcl.png')
fig2 = plot_embedding_2D(result_2D_scl, colors)
plt.show()
plt.savefig('/root/vsislab-2/zq/ship_reid/cluster_contrast/visualize/fig_scl.png')

